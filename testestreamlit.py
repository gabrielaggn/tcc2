import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import extracao_dados as ed
from streamlit_option_menu import option_menu
from PIL import Image
import datetime
import numpy as np

st.set_page_config(page_title="Rela√ß√£o de Endere√ßos", page_icon=":bar_chart", layout="wide", initial_sidebar_state="expanded")

with open('style.css') as f:
    st.markdown(f"<style>f.read()</style>", unsafe_allow_html = True)

#pegar o df 
relacao_enderecos = ed.extrair_df()
orgaos = ed.extrair_df_orgaos()




# fun√ß√£o para selecionar a quantidade de linhas do dataframe
def mostra_qntd_linhas(dataframe):

    #qntd_linhas = st.sidebar.slider('Selecione a quantidade de linhas que deseja mostrar na tabela', min_value = 1, max_value = len(dataframe), step = 1)

    st.write(dataframe.style.format(subset = ['createTimestamp'], formatter="{:%Y/%m/%d}"))
    
    st.write('Foram encontrados %d registros!'%(len(dataframe.index)))

    df_xlsx = ed.to_excel(dataframe)

    st.download_button(
        label="üì• Download data as EXCEL",
        data=df_xlsx,
        file_name='Planilha_filtrada.xlsx'
    )

#menu horizontal (navbar)

selected = option_menu(
    menu_title=None, 
    options=["Consultar Endere√ßos", "Dados Estat√≠sticos", "Inserir Dados"], 
    icons=["person-fill","graph-up","journal-text"], 
    menu_icon="cast", 
    default_index=0,
    orientation="horizontal",
    styles={
        "container": {"padding": "0!important", "background-color": "#D9D9D9"},
        "icon": {"color": "black", "font-size": "25px"}, 
        "nav-link": {"font-size": "20px", "text-align": "center", "margin":"0px", "--hover-color": "#eee"},
        "nav-link-selected": {"background-color": "blue"},

    }
)    



#-----------------bot√£o Consultar Endere√ßos-----------------------
if selected == 'Consultar Endere√ßos':
    st.title("‚úàÔ∏è Endere√ßos CTMA")
    st.markdown('##')

    # filtros para a tabela
    image = Image.open('logo.png')
    st.sidebar.image(image, width=100, use_column_width=39)

    checkbox_mostrar_tabela = st.sidebar.checkbox('Mostrar tabela')
    checkbox_mostrar_orgaos = st.sidebar.checkbox('Mostrar Org√£os Decea')

    #se clicar em mostrar tabela:
    if checkbox_mostrar_tabela:
        
        #criar um subtitulo no app
        st.markdown('## Tabela com a rela√ß√£o de endere√ßos do CTMA, para an√°slise dos dados:')
        st.markdown('### Filtro por endere√ßo:')
        st.sidebar.markdown('## Filtro para a tabela')
        #filtro para o nome comum
        nome_comum = list(relacao_enderecos['mHSCommonName'].unique())
        nome_comum.append('Todas')

        nome_comum2 = st.sidebar.selectbox('Selecione o nome comum do endere√ßo para apresentar na tabela', options = nome_comum)

        if nome_comum2 != 'Todas':
            df_nome_comum = relacao_enderecos.query('mHSCommonName == @nome_comum2')
            mostra_qntd_linhas(df_nome_comum)      
        else:
            mostra_qntd_linhas(relacao_enderecos)
        

        st.markdown('### Filtro Geral')
         
        relacao_enderecos_filtro = ed.filter_dataframe(relacao_enderecos)
        st.write(relacao_enderecos_filtro.style.format(subset = ['createTimestamp'], formatter="{:%Y/%m/%d}"))

        #bot√£o de download
        df_xlsx = ed.to_excel(relacao_enderecos_filtro)

        st.write('Foram encontrados %d registros!'%(len(relacao_enderecos_filtro.index)))

        st.download_button(
            label="üì• Download data as EXCEL",
            data=df_xlsx,
            file_name='Planilha_filtrada.xlsx'
        )
        
    
    #se clicar em mostrar org√£os:
    if checkbox_mostrar_orgaos:
        #criar um subtitulo no app
        st.write('Tabela com a rela√ß√£o de √≥rg√£os do anexo D da MCA 102-7:')
        st.dataframe(orgaos)

#-----------------bot√£o Dados Estat√≠sticos-----------------------
if selected == 'Dados Estat√≠sticos':
    st.title(":bar_chart: Dados estat√≠sticos e gr√°ficos")
    st.markdown('##')
    
    #ocorrencias de cada canal
    st.write('Quantidade de endere√ßos para cada canal:')
    occur_canal = relacao_enderecos['channel'].value_counts()
    occur_canal = pd.DataFrame(occur_canal)
    st.dataframe(occur_canal)
    occur_canal = relacao_enderecos['channel'].value_counts()
    occur_canal.plot(figsize=(8,5), kind='bar')
    plt.legend()
    plt.title('Quantidade de endere√ßos por canal')

    plt.show()
    st.pyplot(plt)
    
    #ocorrencias de cada localidade
    st.write('Quantidade de endere√ßos para cada Localidade:')
    occur_local = relacao_enderecos['Localidade'].value_counts()
    occur_local = pd.DataFrame(occur_local)
    st.dataframe(occur_local)
    occur_local[1:6].plot(figsize=(8,5), kind='bar')
    plt.legend()
    plt.title('TOP 5 localidades com mais endere√ßos')
    plt.show()
    st.pyplot(plt)
    
#-----------------bot√£o Inserir Dados-------------------------
if selected == 'Inserir Dados':
    st.title(f"üìì Inserir dado de um endere√ßo")
    #formul√°rio para inserir dados
    with st.form(key="include_dados"):
        nome_comum = list(relacao_enderecos['mHSCommonName'].unique())
        nome_comum2 = st.selectbox('Selecione o nome comum do endere√ßo que deseja inserir dados:', options = nome_comum)
        input_contato = st.text_input(label="Insira o contato do endere√ßo")
        input_orgao = st.text_input(label="Insira o org√£o do endere√ßo")
        input_localidade = st.text_input(label="Insira a localidade do endere√ßo")
        input_sigad = st.text_input(label="Insira o sigad que solicitou o endere√ßo")
        input_doc = st.text_input(label="Insira o documento que solicitou o endere√ßo")
        input_button_submit = st.form_submit_button("Enviar")
    
    #inserir os dados novos no arquivo excel para atualizar dados caso o bot√£o enviar seja clicado
    if input_button_submit:
        if (input_contato=="") or (input_orgao=="") or (input_localidade=="") or (input_sigad=="") or (input_doc==""):
            st.error("N√£o deixe espa√ßo em branco, caso o dado n√£o esteja dispon√≠vel, escreva: N√£o encontrado. ‚ùå") 
        else:
            st.success("Os dados foram inseridos com sucesso! ‚úîÔ∏è")
            st.write(f'Endere√ßo: {nome_comum2}')
            st.write(f'Contato: {input_contato}')
            st.write(f'√ìrgao: {input_orgao}')
            st.write(f'Localidade: {input_localidade}')
            st.write(f'Sigad: {input_sigad}')
            st.write(f'doc: {input_doc}')
            relacao_enderecos.loc[relacao_enderecos['mHSCommonName'] == nome_comum2, 'Contato'] = input_contato
            relacao_enderecos.loc[relacao_enderecos['mHSCommonName'] == nome_comum2, '√ìrg√£o'] = input_orgao
            relacao_enderecos.loc[relacao_enderecos['mHSCommonName'] == nome_comum2, 'Localidade'] = input_localidade
            relacao_enderecos.loc[relacao_enderecos['mHSCommonName'] == nome_comum2, 'N√∫mero SIGAD'] = input_sigad
            relacao_enderecos.loc[relacao_enderecos['mHSCommonName'] == nome_comum2, 'Doc de \nRefer√™ncia'] = input_doc
            #st.dataframe(relacao_enderecos)     

            ed.transformar_excel(relacao_enderecos)       




    
        